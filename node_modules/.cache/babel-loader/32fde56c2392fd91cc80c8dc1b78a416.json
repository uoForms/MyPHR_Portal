{"ast":null,"code":"import config from \"config\";\nimport { authHeader } from \"./backend\";\nexport var userService = {\n  login: login,\n  newLogin: newLogin,\n  logout: logout,\n  getClient: getClient,\n  getAll: getAll,\n  getAddress: getAddress,\n  getCaregivers: getCaregivers,\n  getComment: getComment,\n  getDietaryRegimen: getDietaryRegimen,\n  getEpisodes: getEpisodes,\n  getHealthProfile: getHealthProfile,\n  getPhysicians: getPhysicians,\n  getPhoneNumber: getPhoneNumber\n}; //for fake api, responsing to backend.js\n\nfunction login(username, password) {\n  var requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      username: username,\n      password: password\n    })\n  };\n  return fetch(\"\".concat(config.apiUrl, \"/users/authenticate\"), requestOptions).then(handleResponse).then(function (user) {\n    // login successful if there's a user in the response\n    if (user) {\n      // store user details and basic auth credentials in local storage\n      // to keep user logged in between page refreshes\n      user.authdata = window.btoa(username + \":\" + password);\n      localStorage.setItem(\"user\", JSON.stringify(user));\n      console.log(localStorage.getItem(\"user\"));\n    }\n\n    return user;\n  });\n}\n/**\n * fetch from real api\n */\n\n\nfunction newLogin(username, password) {\n  //each time fresh local storage\n  localStorage.removeItem(\"oneUser\");\n  var requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      username: username,\n      password: password\n    })\n  };\n  return fetch(\"http://localhost:5000/login?username=\".concat(username, \"&password=\").concat(password)).then(handleResponse).then(function (user) {\n    // login successful if there's a user in the response\n    if (user) {\n      // store user details and basic auth credentials in local storage\n      // to keep user logged in between page refreshes\n      localStorage.setItem(\"oneUser\", JSON.stringify(user));\n      console.log(localStorage.getItem(\"oneUser\")); //store client_id and token locally\n    }\n\n    return user;\n  });\n}\n\nfunction getClient(client_id) {\n  localStorage.removeItem(\"client\");\n  return fetch(\"https://5cdc6232069eb30014202d8e.mockapi.io/profile/\".concat(client_id)) //must have a place to put userId\n  // We get the API response and receive data in JSON format...\n  .then(function (response) {\n    return response.json();\n  }) // ...then we update the users state\n  .then(function (client) {\n    localStorage.setItem(\"client\", JSON.stringify(client));\n    console.log(\"llll:\" + localStorage.getItem(\"client\"));\n    var cli = localStorage.getItem(\"client\");\n    return cli;\n  });\n}\n\nfunction getAddress(id) {\n  return fetch(\"https://5cdc6232069eb30014202d8e.mockapi.io/addresses/\".concat(id)) //must have a place to put userId\n  // We get the API response and receive data in JSON format...\n  .then(function (response) {\n    return response.json();\n  }) // ...then we update the users state\n  .then(function (address) {\n    localStorage.setItem(\"address\", JSON.stringify(address));\n    var c = localStorage.getItem(\"address\");\n    return c;\n  });\n} //https://5cdc6232069eb30014202d8e.mockapi.io/addresses/${id}\n//how about two or more caregivers, is the client_id patient id?\n\n\nfunction getCaregivers(client_id) {\n  localStorage.removeItem(\"caregiver\");\n  return fetch(\"https://5cdc6232069eb30014202d8e.mockapi.io/caregivers/\".concat(client_id)) //must have a place to put userId\n  // We get the API response and receive data in JSON format...\n  .then(function (response) {\n    return response.json();\n  }) // ...then we update the users state\n  .then(function (caregiver) {\n    localStorage.setItem(\"caregiver\", JSON.stringify(caregiver));\n    var c = localStorage.getItem(\"caregiver\"); // console.log(\"print caregiver:\" + c);\n\n    return c;\n  });\n}\n\nfunction getComment() {}\n\nfunction getDietaryRegimen() {}\n\nfunction getEpisodes() {} //response to real api\n\n\nfunction getHealthProfile(client_id, token) {\n  localStorage.removeItem(\"healthProfile\");\n  return fetch(\"http://localhost:5000/health_profile?client_id=\".concat(client_id, \"&token=\").concat(token)).then(handleResponse).then(function (healthProfile) {\n    // login successful if there's a user in the response\n    if (healthProfile) {\n      // store user details and basic auth credentials in local storage\n      // to keep user logged in between page refreshes\n      localStorage.setItem(\"healthProfile\", JSON.stringify(healthProfile));\n      console.log(\"health profile information:\" + localStorage.getItem(\"healthProfile\"));\n    }\n\n    return healthProfile;\n  });\n}\n\nfunction getPhysicians() {}\n\nfunction getPhoneNumber() {}\n\nfunction logout() {\n  localStorage.removeItem(\"oneUser\"); //localStorage.removeItem(\"address\");\n}\n\nfunction getAll() {\n  var requestOptions = {\n    method: \"GET\",\n    headers: authHeader()\n  };\n  return fetch(\"\".concat(config.apiUrl, \"/users\"), requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  return response.text().then(function (text) {\n    var data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout(); //location.reload(true);\n      }\n\n      var error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["/Users/wenyanli/Desktop/MyPHR_Portal_MockAPIs/src/service.js"],"names":["config","authHeader","userService","login","newLogin","logout","getClient","getAll","getAddress","getCaregivers","getComment","getDietaryRegimen","getEpisodes","getHealthProfile","getPhysicians","getPhoneNumber","username","password","requestOptions","method","headers","body","JSON","stringify","fetch","apiUrl","then","handleResponse","user","authdata","window","btoa","localStorage","setItem","console","log","getItem","removeItem","client_id","response","json","client","cli","id","address","c","caregiver","token","healthProfile","text","data","parse","ok","status","error","message","statusText","Promise","reject"],"mappings":"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","sourcesContent":["import config from \"config\";\nimport { authHeader } from \"./backend\";\n\nexport const userService = {\n  login,\n  newLogin,\n  logout,\n  getClient,\n  getAll,\n  getAddress,\n  getCaregivers,\n  getComment,\n  getDietaryRegimen,\n  getEpisodes,\n  getHealthProfile,\n  getPhysicians,\n  getPhoneNumber\n};\n\n//for fake api, responsing to backend.js\nfunction login(username, password) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ username, password })\n  };\n  return fetch(`${config.apiUrl}/users/authenticate`, requestOptions)\n    .then(handleResponse)\n    .then(user => {\n      // login successful if there's a user in the response\n      if (user) {\n        // store user details and basic auth credentials in local storage\n        // to keep user logged in between page refreshes\n        user.authdata = window.btoa(username + \":\" + password);\n        localStorage.setItem(\"user\", JSON.stringify(user));\n        console.log(localStorage.getItem(\"user\"));\n      }\n\n      return user;\n    });\n}\n\n/**\n * fetch from real api\n */\n\nfunction newLogin(username, password) {\n  //each time fresh local storage\n  localStorage.removeItem(\"oneUser\");\n  const requestOptions = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ username, password })\n  };\n\n  return fetch(\n    `http://localhost:5000/login?username=${username}&password=${password}`\n  )\n    .then(handleResponse)\n    .then(user => {\n      // login successful if there's a user in the response\n      if (user) {\n        // store user details and basic auth credentials in local storage\n        // to keep user logged in between page refreshes\n        localStorage.setItem(\"oneUser\", JSON.stringify(user));\n        console.log(localStorage.getItem(\"oneUser\"));\n        //store client_id and token locally\n      }\n      return user;\n    });\n}\nfunction getClient(client_id) {\n  localStorage.removeItem(\"client\");\n  return (\n    fetch(`https://5cdc6232069eb30014202d8e.mockapi.io/profile/${client_id}`) //must have a place to put userId\n      // We get the API response and receive data in JSON format...\n      .then(response => response.json())\n      // ...then we update the users state\n      .then(client => {\n        localStorage.setItem(\"client\", JSON.stringify(client));\n        console.log(\"llll:\" + localStorage.getItem(\"client\"));\n        const cli = localStorage.getItem(\"client\");\n\n        return cli;\n      })\n  );\n}\nfunction getAddress(id) {\n  return (\n    fetch(`https://5cdc6232069eb30014202d8e.mockapi.io/addresses/${id}`) //must have a place to put userId\n      // We get the API response and receive data in JSON format...\n      .then(response => response.json())\n      // ...then we update the users state\n      .then(address => {\n        localStorage.setItem(\"address\", JSON.stringify(address));\n\n        const c = localStorage.getItem(\"address\");\n\n        return c;\n      })\n  );\n}\n//https://5cdc6232069eb30014202d8e.mockapi.io/addresses/${id}\n\n//how about two or more caregivers, is the client_id patient id?\nfunction getCaregivers(client_id) {\n  localStorage.removeItem(\"caregiver\");\n  return (\n    fetch(`https://5cdc6232069eb30014202d8e.mockapi.io/caregivers/${client_id}`) //must have a place to put userId\n      // We get the API response and receive data in JSON format...\n      .then(response => response.json())\n      // ...then we update the users state\n      .then(caregiver => {\n        localStorage.setItem(\"caregiver\", JSON.stringify(caregiver));\n\n        const c = localStorage.getItem(\"caregiver\");\n        // console.log(\"print caregiver:\" + c);\n        return c;\n      })\n  );\n}\n\nfunction getComment() {}\nfunction getDietaryRegimen() {}\nfunction getEpisodes() {}\n\n//response to real api\nfunction getHealthProfile(client_id, token) {\n  localStorage.removeItem(\"healthProfile\");\n\n  return fetch(\n    `http://localhost:5000/health_profile?client_id=${client_id}&token=${token}`\n  )\n    .then(handleResponse)\n    .then(healthProfile => {\n      // login successful if there's a user in the response\n      if (healthProfile) {\n        // store user details and basic auth credentials in local storage\n        // to keep user logged in between page refreshes\n        localStorage.setItem(\"healthProfile\", JSON.stringify(healthProfile));\n        console.log(\n          \"health profile information:\" + localStorage.getItem(\"healthProfile\")\n        );\n      }\n      return healthProfile;\n    });\n}\nfunction getPhysicians() {}\nfunction getPhoneNumber() {}\n\nfunction logout() {\n  localStorage.removeItem(\"oneUser\");\n  //localStorage.removeItem(\"address\");\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader()\n  };\n  return fetch(`${config.apiUrl}/users`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout();\n        //location.reload(true);\n      }\n\n      const error = (data && data.message) || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}